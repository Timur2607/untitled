Задача 1

class Person {
  String name;  // Имя человека
  int age;      // Возраст человека
  String gender; // Пол человека

  // Конструктор для инициализации объекта Person
  Person({required this.name, required this.age, required this.gender});

  // Метод для вывода информации о человеке
  void displayInfo() {
    print('Имя: $name');
    print('Возраст: $age');
    print('Пол: $gender');
  }

  // Метод для увеличения возраста на 1 год
  void incrementAge() {
    age++;
    print('Возраст увеличен. Новый возраст: $age');
  }

  // Метод для изменения имени
  void changeName(String newName) {
    name = newName;
    print('Имя изменено на: $name');
  }
}

void main() {
  // Создание объекта класса Person
  Person person = Person(name: 'Алексей', age: 25, gender: 'Мужской');

  // Вывод информации о человеке
  person.displayInfo();

  // Увеличение возраста
  person.incrementAge();

  // Изменение имени
  person.changeName('Иван');

  // Вывод обновленной информации
  person.displayInfo();
}

Задача 2
class Person {
  String name;  // Имя человека
  int age;      // Возраст
  String gender; // Пол

  // Конструктор класса Person
  Person({required this.name, required this.age, required this.gender});

  // Метод для вывода информации о человеке
  void displayInfo() {
    print('Имя: $name');
    print('Возраст: $age');
    print('Пол: $gender');
  }
}

// Класс Worker (наследуется от Person)
class Worker extends Person {
  double salary; // Поле зарплаты

  // Конструктор класса Worker
  Worker({required String name, required int age, required String gender, required this.salary})
      : super(name: name, age: age, gender: gender);

  // Переопределение метода displayInfo
  @override
  void displayInfo() {
    super.displayInfo(); // Вызов метода displayInfo класса-родителя
    print('Зарплата: $salary');
  }
}

// Класс Manager (наследуется от Worker)
class Manager extends Worker {
  List<Worker> subordinates; // Список подчиненных сотрудников

  // Конструктор класса Manager
  Manager({
    required String name,
    required int age,
    required String gender,
    required double salary,
    required this.subordinates,
  }) : super(name: name, age: age, gender: gender, salary: salary);

  // Переопределение метода displayInfo
  @override
  void displayInfo() {
    super.displayInfo(); // Вызов метода displayInfo класса Worker
    print('Подчиненные:');
    if (subordinates.isEmpty) {
      print('Нет подчиненных.');
    } else {
      for (var worker in subordinates) {
        print('- ${worker.name}');
      }
    }
  }

  // Метод для добавления подчиненного
  void addSubordinate(Worker worker) {
    subordinates.add(worker);
    print('Подчиненный ${worker.name} добавлен.');
  }

  // Метод для удаления подчиненного
  void removeSubordinate(Worker worker) {
    subordinates.remove(worker);
    print('Подчиненный ${worker.name} удален.');
  }
}

// Пример работы
void main() {
  // Создание работника
  Worker worker1 = Worker(name: 'Иван', age: 30, gender: 'Мужской', salary: 50000);
  Worker worker2 = Worker(name: 'Ольга', age: 27, gender: 'Женский', salary: 48000);

  // Создание менеджера
  Manager manager = Manager(
    name: 'Александр',
    age: 40,
    gender: 'Мужской',
    salary: 100000,
    subordinates: [worker1], // Один подчиненный изначально
  );

  // Вывод информации о менеджере
  manager.displayInfo();

  // Добавление нового подчиненного
  manager.addSubordinate(worker2);

  // Повторный вывод информации о менеджере
  manager.displayInfo();

  // Удаление подчиненного
  manager.removeSubordinate(worker1);

  // Очередной вывод информации
  manager.displayInfo();
}


Задача 3

// Интерфейс Animal
abstract class Animal {
  void makeSound(); // Абстрактный метод для воспроизведения звука животного
}

// Класс Dog, реализующий интерфейс Animal
class Dog implements Animal {
  @override
  void makeSound() {
    print('Собака: Гав-гав!');
  }
}

// Класс Cat, реализующий интерфейс Animal
class Cat implements Animal {
  @override
  void makeSound() {
    print('Кошка: Мяу-мяу!');
  }
}

// Класс Cow, реализующий интерфейс Animal
class Cow implements Animal {
  @override
  void makeSound() {
    print('Корова: Му-му!');
  }
}

void main() {
  // Создание массива животных
  List<Animal> animals = [
    Dog(),
    Cat(),
    Cow(),
  ];

  // Демонстрация полиморфизма
  for (Animal animal in animals) {
    animal.makeSound(); // Вызов метода makeSound() для каждого животного
  }
}

Задача 4 

// Абстрактный класс Transport
abstract class Transport {
  // Абстрактный метод move()
  void move();
}

// Класс Car, наследующий Transport
class Car extends Transport {
  @override
  void move() {
    print('Машина едет по дороге.');
  }
}

// Класс Bike, наследующий Transport
class Bike extends Transport {
  @override
  void move() {
    print('Велосипед движется по велодорожке.');
  }
}

void main() {
  // Полиморфизм: Список разных видов транспорта
  List<Transport> transports = [
    Car(),
    Bike(),
  ];

  // Демонстрация вызова метода move() для каждого объекта
  for (Transport transport in transports) {
    transport.move();
  }
}


Задача 5 
// Класс Book
class Book {
  // Поля книги
  String title;
  String author;
  int year;

  // Конструктор
  Book(this.title, this.author, this.year);

  // Переопределение метода toString для удобства вывода на экран
  @override
  String toString() {
    return 'Книга: "$title", Автор: $author, Год: $year';
  }
}

// Класс Library
class Library {
  // Коллекция книг
  List<Book> books = [];

  // Метод для добавления книги
  void addBook(Book book) {
    books.add(book);
    print('Книга "${book.title}" добавлена в библиотеку.');
  }

  // Метод для поиска книг по автору
  List<Book> findBooksByAuthor(String author) {
    return books.where((book) => book.author.toLowerCase() == author.toLowerCase()).toList();
  }

  // Метод для поиска книг по году публикации
  List<Book> findBooksByYear(int year) {
    return books.where((book) => book.year == year).toList();
  }

  // Метод для отображения всех книг в библиотеке
  void displayBooks() {
    if (books.isEmpty) {
      print('Библиотека пуста.');
    } else {
      print('Книги в библиотеке:');
      books.forEach((book) => print(book));
    }
  }
}

void main() {
  // Создаем экземпляры книг
  Book book1 = Book('Война и мир', 'Лев Толстой', 1869);
  Book book2 = Book('Преступление и наказание', 'Федор Достоевский', 1866);
  Book book3 = Book('Мастер и Маргарита', 'Михаил Булгаков', 1967);

  // Создаем экземпляр библиотеки
  Library library = Library();

  // Добавляем книги в библиотеку
  library.addBook(book1);
  library.addBook(book2);
  library.addBook(book3);

  // Отображаем все книги
  library.displayBooks();

  // Ищем книги по автору
  print('\nПоиск по автору "Федор Достоевский":');
  List<Book> foundByAuthor = library.findBooksByAuthor('Федор Достоевский');
  foundByAuthor.forEach((book) => print(book));

  // Ищем книги по году публикации
  print('\nПоиск по году 1967:');
  List<Book> foundByYear = library.findBooksByYear(1967);
  foundByYear.forEach((book) => print(book));
}

Задача 6
class BankAccount {
  // Приватные поля
  String _accountNumber; // Номер счета (доступен только внутри класса)
  double _balance; // Баланс (доступен только внутри класса)

  // Конструктор
  BankAccount(this._accountNumber, this._balance);

  // Геттер для получения номера счёта (только чтение)
  String get accountNumber => _accountNumber;

  // Геттер для получения баланса (только чтение)
  double get balance => _balance;

  // Метод для пополнения счёта
  void deposit(double amount) {
    if (amount <= 0) {
      print('Сумма для пополнения должна быть больше 0.');
    } else {
      _balance += amount;
      print('Счёт пополнен на $amount. Текущий баланс: $_balance.');
    }
  }

  // Метод для снятия средств
  void withdraw(double amount) {
    if (amount <= 0) {
      print('Сумма для снятия должна быть больше 0.');
    } else if (amount > _balance) {
      print('Недостаточно средств! Доступный баланс: $_balance.');
    } else {
      _balance -= amount;
      print('Снято $amount. Текущий баланс: $_balance.');
    }
  }
}

void main() {
  // Создание банковского счёта
  BankAccount account = BankAccount('123456789', 1000.0);

  // Пополнение счёта
  account.deposit(500); // Пополнено на 500
  account.deposit(-100); // Ошибка

  // Снятие средств
  account.withdraw(200); // Снято 200
  account.withdraw(1500); // Ошибка, недостаточно средств
  account.withdraw(0); // Ошибка

  // Просмотр текущего состояния счета
  print('Номер счёта: ${account.accountNumber}');
  print('Баланс: ${account.balance}');
}

Задача 7

class Counter {
  // Статическое поле для хранения числа созданных объектов
  static int _count = 0;

  // Конструктор
  Counter() {
    _incrementCount();
  }

  // Метод для увеличения счётчика объектов
  static void _incrementCount() {
    _count++;
  }

  // Геттер для получения текущего значения счётчика
  static int get count => _count;
}

void main() {
  // Создаём несколько объектов класса Counter
  Counter obj1 = Counter();
  Counter obj2 = Counter();
  Counter obj3 = Counter();

  // Выводим общее количество созданных объектов
  print('Количество созданных объектов: ${Counter.count}');
}


Задача 8
// Абстрактный класс Shape
abstract class Shape {
  // Абстрактный метод для расчета площади
  double getArea();
}

// Класс Circle, наследующий от Shape
class Circle extends Shape {
  final double radius;

  // Конструктор для передачи радиуса
  Circle(this.radius);

  // Реализация метода getArea() для круга
  @override
  double getArea() {
    return 3.14159 * radius * radius; // Формула площади круга: πr²
  }
}

// Класс Rectangle, наследующий от Shape
class Rectangle extends Shape {
  final double width;
  final double height;

  // Конструктор для передачи ширины и высоты
  Rectangle(this.width, this.height);

  // Реализация метода getArea() для прямоугольника
  @override
  double getArea() {
    return width * height; // Формула площади прямоугольника: ширина * высота
  }
}

void main() {
  // Пример круга с радиусом 5
  Shape circle = Circle(5.0);
  print('Площадь круга: ${circle.getArea()}');

  // Пример прямоугольника с шириной 4 и высотой 6
  Shape rectangle = Rectangle(4.0, 6.0);
  print('Площадь прямоугольника: ${rectangle.getArea()}');
}


Задача 9
// Базовый класс Animal
class Animal {
  // Метод move(), который будет переопределен в потомках
  void move() {
    print("Животное движется...");
  }
}

// Класс Fish, наследующий Animal
class Fish extends Animal {
  // Переопределение метода move()
  @override
  void move() {
    print("Рыба плавает...");
  }
}

// Класс Bird, наследующий Animal
class Bird extends Animal {
  // Переопределение метода move()
  @override
  void move() {
    print("Птица летает...");
  }
}

// Класс Dog, наследующий Animal
class Dog extends Animal {
  // Переопределение метода move()
  @override
  void move() {
    print("Собака бегает...");
  }
}

void main() {
  // Создаем объекты классов
  Animal genericAnimal = Animal();
  Fish fish = Fish();
  Bird bird = Bird();
  Dog dog = Dog();

  // Вызываем методы move() для каждого объекта
  genericAnimal.move(); // Вывод: "Животное движется..."
  fish.move();          // Вывод: "Рыба плавает..."
  bird.move();          // Вывод: "Птица летает..."
  dog.move();           // Вывод: "Собака бегает..."
}


Задача 10
// Класс Student
class Student {
  String name; // Имя студента
  String group; // Группа студента
  double grade; // Успеваемость/оценка студента

  // Конструктор
  Student({required this.name, required this.group, required this.grade});

  // Переопределение метода toString для удобного вывода информации о студенте
  @override
  String toString() {
    return 'Student{name: $name, group: $group, grade: $grade}';
  }
}

// Класс University
class University {
  List<Student> students = []; // Список студентов

  // Метод для добавления студента в список
  void addStudent(Student student) {
    students.add(student);
  }

  // Метод для сортировки студентов по имени
  void sortByName() {
    students.sort((a, b) => a.name.compareTo(b.name));
  }

  // Метод для фильтрации студентов по минимальной успеваемости
  List<Student> filterByGrade(double minGrade) {
    return students.where((student) => student.grade >= minGrade).toList();
  }

  // Метод для отображения всех студентов (для проверки)
  void showAllStudents() {
    for (var student in students) {
      print(student);
    }
  }
}

void main() {
  // Создаем экземпляр университета
  var university = University();

  // Добавляем студентов
  university.addStudent(Student(name: 'Иван', group: 'A1', grade: 4.5));
  university.addStudent(Student(name: 'Мария', group: 'B2', grade: 3.9));
  university.addStudent(Student(name: 'Алексей', group: 'A1', grade: 4.8));
  university.addStudent(Student(name: 'София', group: 'C3', grade: 5.0));
  university.addStudent(Student(name: 'Дмитрий', group: 'B2', grade: 3.6));

  print('Все студенты:');
  university.showAllStudents();

  // Сортировка студентов по имени
  university.sortByName();
  print('\nПосле сортировки по имени:');
  university.showAllStudents();

  // Фильтрация студентов по минимальной оценке
  double minGrade = 4.0;
  print('\nСтуденты с успеваемостью выше $minGrade:');
  var filteredStudents = university.filterByGrade(minGrade);
  filteredStudents.forEach(print);
}

Задача 11
// Класс Product (товар)
class Product {
  String name; // Название товара
  double price; // Цена товара
  int quantity; // Количество товара на складе

  // Конструктор
  Product({required this.name, required this.price, required this.quantity});

  // Переопределение метода toString для удобного отображения информации о продукте
  @override
  String toString() {
    return 'Product{name: $name, price: $price, quantity: $quantity}';
  }
}

// Класс Store (магазин)
class Store {
  List<Product> products = []; // Список товаров в магазине

  // Метод для добавления продукта
  void addProduct(Product product) {
    // Проверяем, есть ли уже товар с таким именем
    var existingProduct = products.firstWhere(
        (p) => p.name.toLowerCase() == product.name.toLowerCase(),
        orElse: () => null);
    if (existingProduct != null) {
      // Если товар уже существует, увеличиваем его количество
      existingProduct.quantity += product.quantity;
      print('Quantity of "${product.name}" updated.');
    } else {
      // Если товара нет, добавляем новый продукт
      products.add(product);
      print('Product "${product.name}" added.');
    }
  }

  // Метод для удаления продукта по имени
  void removeProduct(String name) {
    var removed = products.removeWhere(
        (product) => product.name.toLowerCase() == name.toLowerCase());
    if (removed > 0) {
      print('Product "$name" removed.');
    } else {
      print('Product "$name" not found.');
    }
  }

  // Метод для поиска товара по имени
  Product? findProductByName(String name) {
    return products.firstWhere(
        (product) => product.name.toLowerCase() == name.toLowerCase(),
        orElse: () => null);
  }

  // Метод для отображения всех продуктов в магазине
  void showAllProducts() {
    if (products.isEmpty) {
      print('The store is empty.');
    } else {
      print('Products in the store:');
      for (var product in products) {
        print(product);
      }
    }
  }
}

// Пример использования
void main() {
  // Создаем объект магазина
  var store = Store();

  // Добавляем товары
  store.addProduct(Product(name: 'Apple', price: 1.2, quantity: 50));
  store.addProduct(Product(name: 'Banana', price: 0.8, quantity: 30));
  store.addProduct(Product(name: 'Orange', price: 1.5, quantity: 20));

  // Выводим все товары
  store.showAllProducts();

  // Поиск товара
  var product = store.findProductByName('Banana');
  if (product != null) {
    print('Found product: $product');
  } else {
    print('Product not found.');
  }

  // Удаление товара
  store.removeProduct('Banana');

  // Выводим все товары после удаления
  store.showAllProducts();

  // Добавляем больше яблок
  store.addProduct(Product(name: 'Apple', price: 1.2, quantity: 25));

  // Выводим итоговый список товаров
  store.showAllProducts();
}

Задача 12
// Интерфейс PaymentSystem
abstract class PaymentSystem {
  // Метод для оплаты
  void pay(double amount);

  // Метод для возврата средств
  void refund(double amount);
}

// Класс CreditCard, реализующий интерфейс PaymentSystem
class CreditCard implements PaymentSystem {
  String cardNumber;

  CreditCard(this.cardNumber);

  @override
  void pay(double amount) {
    print('Оплата $amount через кредитную карту $cardNumber выполнена.');
  }

  @override
  void refund(double amount) {
    print('Возврат $amount на кредитную карту $cardNumber выполнен.');
  }
}

// Класс PayPal, реализующий интерфейс PaymentSystem
class PayPal implements PaymentSystem {
  String email;

  PayPal(this.email);

  @override
  void pay(double amount) {
    print('Оплата $amount через PayPal аккаунт $email выполнена.');
  }

  @override
  void refund(double amount) {
    print('Возврат $amount на PayPal аккаунт $email выполнен.');
  }
}

// Тестирование работы классов
void main() {
  // Создаем платежную систему CreditCard
  PaymentSystem creditCard = CreditCard('1234-5678-9012-3456');
  creditCard.pay(100.0);
  creditCard.refund(50.0);

  // Создаем платежную систему PayPal
  PaymentSystem payPal = PayPal('user@example.com');
  payPal.pay(200.0);
  payPal.refund(75.0);
}


Задача 13
// Класс UniqueID для генерации уникальных идентификаторов
class UniqueID {
  // Статическое поле для хранения текущего значения счетчика
  static int _counter = 0;

  // Метод для генерации уникального идентификатора
  static int generateID() {
    _counter++; // Увеличение счетчика на 1
    return _counter; // Возврат нового ID
  }
}

// Пример класса, который использует UniqueID
class MyClass {
  // ID объекта
  final int id;

  // Конструктор, который получает уникальный ID
  MyClass() : id = UniqueID.generateID();

  @override
  String toString() => 'MyClass Object ID: $id';
}

void main() {
  // Создаем объекты и проверяем уникальные идентификаторы
  MyClass obj1 = MyClass();
  MyClass obj2 = MyClass();
  MyClass obj3 = MyClass();

  print(obj1); // Вывод: MyClass Object ID: 1
  print(obj2); // Вывод: MyClass Object ID: 2
  print(obj3); // Вывод: MyClass Object ID: 3
}

Задача 14
// Класс "Точка" с координатами x и y
class Point {
  double x;
  double y;

  // Конструктор для инициализации координат точки
  Point(this.x, this.y);

  @override
  String toString() => 'Point($x, $y)';
}

// Класс "Прямоугольник", содержащий две точки
class Rectangle {
  Point topLeft; // Левая верхняя точка
  Point bottomRight; // Правая нижняя точка

  // Конструктор для инициализации точек прямоугольника
  Rectangle(this.topLeft, this.bottomRight);

  // Метод для вычисления площади прямоугольника
  double getArea() {
    // Вычисление ширины (по x)
    double width = (bottomRight.x - topLeft.x).abs();
    // Вычисление высоты (по y)
    double height = (topLeft.y - bottomRight.y).abs();

    // Площадь прямоугольника = ширина * высота
    return width * height;
  }

  @override
  String toString() =>
      'Rectangle(TopLeft: $topLeft, BottomRight: $bottomRight)';
}

void main() {
  // Создаем точки
  Point topLeft = Point(1.0, 4.0);
  Point bottomRight = Point(5.0, 1.0);

  // Создаем прямоугольник из точек
  Rectangle rectangle = Rectangle(topLeft, bottomRight);

  // Вывод информации о прямоугольнике и его площади
  print(rectangle); // Выводит информацию о точках
  print('Area of the rectangle: ${rectangle.getArea()}'); // Площадь
}

Задача 15

import 'dart:math';

// Класс для представления комплексного числа
class ComplexNumber {
  double real; // Действительная часть
  double imaginary; // Мнимая часть

  // Конструктор для инициализации комплексного числа
  ComplexNumber(this.real, this.imaginary);

  // Метод для сложения двух комплексных чисел
  ComplexNumber add(ComplexNumber other) {
    return ComplexNumber(
      this.real + other.real,
      this.imaginary + other.imaginary,
    );
  }

  // Метод для вычитания двух комплексных чисел
  ComplexNumber subtract(ComplexNumber other) {
    return ComplexNumber(
      this.real - other.real,
      this.imaginary - other.imaginary,
    );
  }

  // Метод для умножения двух комплексных чисел
  ComplexNumber multiply(ComplexNumber other) {
    double realPart = this.real * other.real - this.imaginary * other.imaginary;
    double imaginaryPart = this.real * other.imaginary + this.imaginary * other.real;
    return ComplexNumber(realPart, imaginaryPart);
  }

  // Метод для деления двух комплексных чисел
  ComplexNumber divide(ComplexNumber other) {
    double denominator = other.real * other.real + other.imaginary * other.imaginary;
    if (denominator == 0) {
      throw ArgumentError("Деление на ноль невозможно");
    }

    double realPart = (this.real * other.real + this.imaginary * other.imaginary) / denominator;
    double imaginaryPart = (this.imaginary * other.real - this.real * other.imaginary) / denominator;
    return ComplexNumber(realPart, imaginaryPart);
  }

  // Метод для красивого текстового представления комплексного числа
  @override
  String toString() {
    if (imaginary >= 0) {
      return '${real} + ${imaginary}i';
    } else {
      return '${real} - ${imaginary.abs()}i';
    }
  }
}

void main() {
  // Примеры использования класса ComplexNumber

  // Создаем два комплексных числа
  ComplexNumber num1 = ComplexNumber(3, 4);
  ComplexNumber num2 = ComplexNumber(1, -2);

  print("Число 1: $num1");
  print("Число 2: $num2");

  // Сложение
  ComplexNumber sum = num1.add(num2);
  print("Сумма: $sum");

  // Вычитание
  ComplexNumber diff = num1.subtract(num2);
  print("Разность: $diff");

  // Умножение
  ComplexNumber product = num1.multiply(num2);
  print("Произведение: $product");

  // Деление
  try {
    ComplexNumber quotient = num1.divide(num2);
    print("Частное: $quotient");
  } catch (e) {
    print(e);
  }
}

Задача 16
class Matrix {
  // Данные матрицы - двумерный список
  final List<List<double>> data;

  // Конструктор
  Matrix(this.data);

  // Проверка размеров матрицы
  int get rowCount => data.length; // Количество строк
  int get colCount => data.isNotEmpty ? data[0].length : 0; // Количество столбцов

  // Перегрузка оператора "+" для сложения матриц
  Matrix operator +(Matrix other) {
    // Проверка на совпадение размеров матриц
    if (rowCount != other.rowCount || colCount != other.colCount) {
      throw ArgumentError('Матрицы должны быть одного размера для сложения.');
    }

    // Сложение матриц
    List<List<double>> result = List.generate(rowCount, (i) =>
        List.generate(colCount, (j) => data[i][j] + other.data[i][j]));

    return Matrix(result);
  }

  // Перегрузка оператора "*" для умножения матриц
  Matrix operator *(Matrix other) {
    // Проверка на возможность умножения (столбцы первой == строки второй)
    if (colCount != other.rowCount) {
      throw ArgumentError('Количество столбцов первой матрицы должно совпадать с количеством строк второй.');
    }

    // Умножение матриц
    List<List<double>> result = List.generate(rowCount, (i) =>
        List.generate(other.colCount, (j) {
          double sum = 0;
          for (int k = 0; k < colCount; k++) {
            sum += data[i][k] * other.data[k][j];
          }
          return sum;
        }));

    return Matrix(result);
  }

  // Метод для красивого вывода матрицы
  @override
  String toString() {
    return data.map((row) => row.join('\t')).join('\n');
  }
}

void main() {
  // Пример использования

  // Матрица A (2x3)
  Matrix a = Matrix([
    [1, 2, 3],
    [4, 5, 6]
  ]);

  // Матрица B (2x3) - для сложения с A
  Matrix b = Matrix([
    [7, 8, 9],
    [10, 11, 12]
  ]);

  // Матрица C (3x2) - для умножения с A
  Matrix c = Matrix([
    [1, 2],
    [3, 4],
    [5, 6]
  ]);

  // Сложение A и B
  print('Матрица A:');
  print(a);
  print('\nМатрица B:');
  print(b);
  print('\nA + B:');
  print(a + b);

  // Умножение A и C
  print('\nМатрица C:');
  print(c);
  print('\nA * C:');
  print(a * c);
}

Задача 17
import 'dart:math';

// Класс "Оружие"
class Weapon {
  String name;
  int damage;

  Weapon(this.name, this.damage);

  @override
  String toString() => "$name (Урон: $damage)";
}

// Класс "Игрок"
class Player {
  String name;
  int health;
  Weapon? weapon;

  Player(this.name, this.health);

  // Атака противника
  void attack(Enemy enemy) {
    if (weapon == null) {
      print("$name пытается атаковать, но у него нет оружия!");
    } else {
      print("$name атакует ${enemy.name} с помощью ${weapon!.name}!");
      enemy.takeDamage(weapon!.damage);
    }
  }

  // Получение урона
  void takeDamage(int damage) {
    health -= damage;
    print("$name получил $damage урона. Осталось здоровья: $health");
    if (health <= 0) {
      print("$name погибает!");
    }
  }

  // Поднятие оружия
  void equipWeapon(Weapon newWeapon) {
    weapon = newWeapon;
    print("$name поднимает оружие: ${weapon!.name}");
  }

  bool isAlive() => health > 0;
}

// Класс "Враг"
class Enemy {
  String name;
  int health;
  int attackPower;

  Enemy(this.name, this.health, this.attackPower);

  // Атака игрока
  void attack(Player player) {
    print("$name атакует ${player.name}!");
    player.takeDamage(attackPower);
  }

  // Получение урона
  void takeDamage(int damage) {
    health -= damage;
    print("$name получил $damage урона. Осталось здоровья: $health");
    if (health <= 0) {
      print("$name был побежден!");
    }
  }

  bool isAlive() => health > 0;
}

// Основная игра
void main() {
  // Создаем оружие
  Weapon sword = Weapon("Меч", 25);
  Weapon axe = Weapon("Топор", 30);

  // Создаем игрока
  Player player = Player("Герой", 100);

  // Создаем врага
  Enemy enemy = Enemy("Злобный орк", 80, 15);

  // Игра
  print("Игра началась!");

  // Вывод начального состояния
  print("${player.name} встречает ${enemy.name}.");

  // Игрок поднимает оружие
  player.equipWeapon(sword);

  // Бой
  while (player.isAlive() && enemy.isAlive()) {
    // Игрок атакует врага
    player.attack(enemy);

    // Проверяем, жив ли враг
    if (!enemy.isAlive()) break;

    // Враг атакует игрока
    enemy.attack(player);

    // Проверяем, жив ли игрок
    if (!player.isAlive()) break;
  }

  // Результат игры
  if (player.isAlive()) {
    print("Игрок победил!");
  } else {
    print("Игрок погиб. Игра окончена.");
  }
}


Задача 18
// Класс "Продукт"
class Product {
  String name;
  double price;

  Product(this.name, this.price);

  @override
  String toString() => "$name (\$${price.toStringAsFixed(2)})";
}

// Класс "Покупатель"
class Customer {
  String name;
  List<Order> orderHistory = []; // История заказов

  Customer(this.name);

  // Добавляет заказ в историю заказов
  void addOrder(Order order) {
    orderHistory.add(order);
    print("Заказ для клиента $name успешно добавлен!");
  }

  // Показывает историю заказов и их общую стоимость
  void viewOrderHistory() {
    print("\nИстория заказов для клиента $name:");
    if (orderHistory.isEmpty) {
      print("Заказов нет.");
    } else {
      double totalSpent = 0.0;
      for (Order order in orderHistory) {
        print(order);
        totalSpent += order.getTotalPrice();
      }
      print("\nОбщая сумма заказов: \$${totalSpent.toStringAsFixed(2)}");
    }
  }
}

// Класс "Заказ"
class Order {
  List<Product> products = [];

  // Метод для добавления продукта в заказ
  void addProduct(Product product) {
    products.add(product);
    print("${product.name} добавлен в заказ.");
  }

  // Подсчет общей стоимости заказа
  double getTotalPrice() {
    return products.fold(0.0, (sum, product) => sum + product.price);
  }

  @override
  String toString() {
    if (products.isEmpty) {
      return "Заказ пуст.";
    }
    String productList = products.map((p) => p.toString()).join(", ");
    return "Заказ: $productList. Общая стоимость: \$${getTotalPrice().toStringAsFixed(2)}";
  }
}

// Точка входа
void main() {
  // Создание продуктов
  Product apple = Product("Яблоко", 1.50);
  Product banana = Product("Банан", 0.80);
  Product orange = Product("Апельсин", 1.20);

  // Создание покупателя
  Customer customer = Customer("Иван Иванов");

  // Создание первого заказа
  Order order1 = Order();
  order1.addProduct(apple);
  order1.addProduct(banana);

  // Добавляем первый заказ в историю покупателя
  customer.addOrder(order1);

  // Создание второго заказа
  Order order2 = Order();
  order2.addProduct(orange);
  order2.addProduct(banana);
  order2.addProduct(apple);

  // Добавляем второй заказ в историю покупателя
  customer.addOrder(order2);

  // Просмотр истории заказов покупателя
  customer.viewOrderHistory();
}

Задача 19
// Базовый класс "Устройство"
class Device {
  String brand;

  Device(this.brand); // Конструктор для установки бренда

  void turnOn() {
    print("$brand включен.");
  }

  void turnOff() {
    print("$brand выключен.");
  }
}

// Класс "Смартфон", унаследованный от Device
class Smartphone extends Device {
  Smartphone(String brand) : super(brand); // Передача бренда в родительский класс

  // Уникальный метод "Сделать фотографию"
  void takePhoto() {
    print("$brand делает фотографию...");
  }
}

// Класс "Ноутбук", унаследованный от Device
class Laptop extends Device {
  Laptop(String brand) : super(brand); // Передача бренда в родительский класс

  // Уникальный метод "Запустить приложение"
  void runApplication(String appName) {
    print("$brand запускает приложение $appName...");
  }
}

// Основная функция для демонстрации работы
void main() {
  // Создаем объект Smartphone
  Smartphone smartphone = Smartphone("Samsung");
  smartphone.turnOn(); // Используем метод из родительского класса
  smartphone.takePhoto(); // Используем уникальный метод смартфона
  smartphone.turnOff(); // Используем метод из родительского класса

  print(""); // Пустая строка для разделителя

  // Создаем объект Laptop
  Laptop laptop = Laptop("Dell");
  laptop.turnOn(); // Используем метод из родительского класса
  laptop.runApplication("Visual Studio Code"); // Уникальный метод ноутбука
  laptop.turnOff(); // Используем метод из родительского класса
}

Задача 20
import 'dart:io';

// Класс, описывающий игрока
class Player {
  final String name; // Имя игрока
  final String symbol; // Символ игрока: 'X' или 'O'

  Player(this.name, this.symbol);
}

// Класс, который управляет игрой "Крестики-нолики"
class Game {
  List<List<String>> board; // Игровое поле
  Player player1; // Первый игрок
  Player player2; // Второй игрок
  Player? currentPlayer; // Текущий игрок

  Game(this.player1, this.player2)
      : board = List.generate(3, (_) => List.generate(3, (_) => ' ')), // Создаем пустое поле 3x3
        currentPlayer = null;

  // Вывод игрового поля на экран
  void displayBoard() {
    print('\n');
    for (var row in board) {
      print(row.map((cell) => cell.isEmpty ? ' ' : cell).join(' | '));
      print('-' * 9);
    }
  }

  // Смена текущего игрока
  void switchPlayer() {
    currentPlayer = (currentPlayer == player1) ? player2 : player1;
  }

  // Ход игрока
  bool makeMove(int row, int col) {
    if (row < 0 || row >= 3 || col < 0 || col >= 3 || board[row][col] != ' ') {
      print("Неверный ход. Ячейка уже занята или не существует.");
      return false;
    }

    board[row][col] = currentPlayer!.symbol; // Записываем символ игрока в ячейку
    return true;
  }

  // Проверка победы
  Player? checkWinner() {
    // Проверка строк
    for (var row in board) {
      if (row.every((cell) => cell == currentPlayer!.symbol)) {
        return currentPlayer;
      }
    }

    // Проверка столбцов
    for (int col = 0; col < 3; col++) {
      if (board[0][col] == currentPlayer!.symbol &&
          board[1][col] == currentPlayer!.symbol &&
          board[2][col] == currentPlayer!.symbol) {
        return currentPlayer;
      }
    }

    // Проверка диагоналей
    if (board[0][0] == currentPlayer!.symbol &&
        board[1][1] == currentPlayer!.symbol &&
        board[2][2] == currentPlayer!.symbol) {
      return currentPlayer;
    }

    if (board[0][2] == currentPlayer!.symbol &&
        board[1][1] == currentPlayer!.symbol &&
        board[2][0] == currentPlayer!.symbol) {
      return currentPlayer;
    }

    return null; // Нет победителя
  }

  // Проверка на ничью
  bool isDraw() {
    for (var row in board) {
      if (row.contains(' ')) {
        return false; // Если есть пустая ячейка, то продолжаем игру
      }
    }
    return true; // Все ячейки заполнены
  }

  // Запуск игры
  void start() {
    currentPlayer = player1; // Устанавливаем первого игрока
    while (true) {
      displayBoard();
      print('${currentPlayer!.name} (${currentPlayer!.symbol}), ваш ход!');
      print('Введите номер строки (0-2):');
      int row = int.parse(stdin.readLineSync()!);
      print('Введите номер столбца (0-2):');
      int col = int.parse(stdin.readLineSync()!);

      if (makeMove(row, col)) {
        // Проверяем победу после успешного хода
        Player? winner = checkWinner();
        if (winner != null) {
          displayBoard();
          print('🎉 Поздравляем, ${winner.name} (${winner.symbol}) победил!');
          break;
        } else if (isDraw()) {
          displayBoard();
          print('Игра закончилась ничьей!');
          break;
        }

        // Смена игрока
        switchPlayer();
      }
    }
  }
}

void main() {
  // Создаем игроков
  print('Введите имя первого игрока (играет X):');
  String player1Name = stdin.readLineSync()!;
  print('Введите имя второго игрока (играет O):');
  String player2Name = stdin.readLineSync()!;

  Player player1 = Player(player1Name, 'X');
  Player player2 = Player(player2Name, 'O');

  // Создаем игру и запускаем её
  Game game = Game(player1, player2);
  game.start();
}








