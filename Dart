Задача 1

class Person {
  String name;  // Имя человека
  int age;      // Возраст человека
  String gender; // Пол человека

  // Конструктор для инициализации объекта Person
  Person({required this.name, required this.age, required this.gender});

  // Метод для вывода информации о человеке
  void displayInfo() {
    print('Имя: $name');
    print('Возраст: $age');
    print('Пол: $gender');
  }

  // Метод для увеличения возраста на 1 год
  void incrementAge() {
    age++;
    print('Возраст увеличен. Новый возраст: $age');
  }

  // Метод для изменения имени
  void changeName(String newName) {
    name = newName;
    print('Имя изменено на: $name');
  }
}

void main() {
  // Создание объекта класса Person
  Person person = Person(name: 'Алексей', age: 25, gender: 'Мужской');

  // Вывод информации о человеке
  person.displayInfo();

  // Увеличение возраста
  person.incrementAge();

  // Изменение имени
  person.changeName('Иван');

  // Вывод обновленной информации
  person.displayInfo();
}

Задача 2
class Person {
  String name;  // Имя человека
  int age;      // Возраст
  String gender; // Пол

  // Конструктор класса Person
  Person({required this.name, required this.age, required this.gender});

  // Метод для вывода информации о человеке
  void displayInfo() {
    print('Имя: $name');
    print('Возраст: $age');
    print('Пол: $gender');
  }
}

// Класс Worker (наследуется от Person)
class Worker extends Person {
  double salary; // Поле зарплаты

  // Конструктор класса Worker
  Worker({required String name, required int age, required String gender, required this.salary})
      : super(name: name, age: age, gender: gender);

  // Переопределение метода displayInfo
  @override
  void displayInfo() {
    super.displayInfo(); // Вызов метода displayInfo класса-родителя
    print('Зарплата: $salary');
  }
}

// Класс Manager (наследуется от Worker)
class Manager extends Worker {
  List<Worker> subordinates; // Список подчиненных сотрудников

  // Конструктор класса Manager
  Manager({
    required String name,
    required int age,
    required String gender,
    required double salary,
    required this.subordinates,
  }) : super(name: name, age: age, gender: gender, salary: salary);

  // Переопределение метода displayInfo
  @override
  void displayInfo() {
    super.displayInfo(); // Вызов метода displayInfo класса Worker
    print('Подчиненные:');
    if (subordinates.isEmpty) {
      print('Нет подчиненных.');
    } else {
      for (var worker in subordinates) {
        print('- ${worker.name}');
      }
    }
  }

  // Метод для добавления подчиненного
  void addSubordinate(Worker worker) {
    subordinates.add(worker);
    print('Подчиненный ${worker.name} добавлен.');
  }

  // Метод для удаления подчиненного
  void removeSubordinate(Worker worker) {
    subordinates.remove(worker);
    print('Подчиненный ${worker.name} удален.');
  }
}

// Пример работы
void main() {
  // Создание работника
  Worker worker1 = Worker(name: 'Иван', age: 30, gender: 'Мужской', salary: 50000);
  Worker worker2 = Worker(name: 'Ольга', age: 27, gender: 'Женский', salary: 48000);

  // Создание менеджера
  Manager manager = Manager(
    name: 'Александр',
    age: 40,
    gender: 'Мужской',
    salary: 100000,
    subordinates: [worker1], // Один подчиненный изначально
  );

  // Вывод информации о менеджере
  manager.displayInfo();

  // Добавление нового подчиненного
  manager.addSubordinate(worker2);

  // Повторный вывод информации о менеджере
  manager.displayInfo();

  // Удаление подчиненного
  manager.removeSubordinate(worker1);

  // Очередной вывод информации
  manager.displayInfo();
}


Задача 3

// Интерфейс Animal
abstract class Animal {
  void makeSound(); // Абстрактный метод для воспроизведения звука животного
}

// Класс Dog, реализующий интерфейс Animal
class Dog implements Animal {
  @override
  void makeSound() {
    print('Собака: Гав-гав!');
  }
}

// Класс Cat, реализующий интерфейс Animal
class Cat implements Animal {
  @override
  void makeSound() {
    print('Кошка: Мяу-мяу!');
  }
}

// Класс Cow, реализующий интерфейс Animal
class Cow implements Animal {
  @override
  void makeSound() {
    print('Корова: Му-му!');
  }
}

void main() {
  // Создание массива животных
  List<Animal> animals = [
    Dog(),
    Cat(),
    Cow(),
  ];

  // Демонстрация полиморфизма
  for (Animal animal in animals) {
    animal.makeSound(); // Вызов метода makeSound() для каждого животного
  }
}

Задача 4 

// Абстрактный класс Transport
abstract class Transport {
  // Абстрактный метод move()
  void move();
}

// Класс Car, наследующий Transport
class Car extends Transport {
  @override
  void move() {
    print('Машина едет по дороге.');
  }
}

// Класс Bike, наследующий Transport
class Bike extends Transport {
  @override
  void move() {
    print('Велосипед движется по велодорожке.');
  }
}

void main() {
  // Полиморфизм: Список разных видов транспорта
  List<Transport> transports = [
    Car(),
    Bike(),
  ];

  // Демонстрация вызова метода move() для каждого объекта
  for (Transport transport in transports) {
    transport.move();
  }
}


Задача 5 
// Класс Book
class Book {
  // Поля книги
  String title;
  String author;
  int year;

  // Конструктор
  Book(this.title, this.author, this.year);

  // Переопределение метода toString для удобства вывода на экран
  @override
  String toString() {
    return 'Книга: "$title", Автор: $author, Год: $year';
  }
}

// Класс Library
class Library {
  // Коллекция книг
  List<Book> books = [];

  // Метод для добавления книги
  void addBook(Book book) {
    books.add(book);
    print('Книга "${book.title}" добавлена в библиотеку.');
  }

  // Метод для поиска книг по автору
  List<Book> findBooksByAuthor(String author) {
    return books.where((book) => book.author.toLowerCase() == author.toLowerCase()).toList();
  }

  // Метод для поиска книг по году публикации
  List<Book> findBooksByYear(int year) {
    return books.where((book) => book.year == year).toList();
  }

  // Метод для отображения всех книг в библиотеке
  void displayBooks() {
    if (books.isEmpty) {
      print('Библиотека пуста.');
    } else {
      print('Книги в библиотеке:');
      books.forEach((book) => print(book));
    }
  }
}

void main() {
  // Создаем экземпляры книг
  Book book1 = Book('Война и мир', 'Лев Толстой', 1869);
  Book book2 = Book('Преступление и наказание', 'Федор Достоевский', 1866);
  Book book3 = Book('Мастер и Маргарита', 'Михаил Булгаков', 1967);

  // Создаем экземпляр библиотеки
  Library library = Library();

  // Добавляем книги в библиотеку
  library.addBook(book1);
  library.addBook(book2);
  library.addBook(book3);

  // Отображаем все книги
  library.displayBooks();

  // Ищем книги по автору
  print('\nПоиск по автору "Федор Достоевский":');
  List<Book> foundByAuthor = library.findBooksByAuthor('Федор Достоевский');
  foundByAuthor.forEach((book) => print(book));

  // Ищем книги по году публикации
  print('\nПоиск по году 1967:');
  List<Book> foundByYear = library.findBooksByYear(1967);
  foundByYear.forEach((book) => print(book));
}

Задача 6
class BankAccount {
  // Приватные поля
  String _accountNumber; // Номер счета (доступен только внутри класса)
  double _balance; // Баланс (доступен только внутри класса)

  // Конструктор
  BankAccount(this._accountNumber, this._balance);

  // Геттер для получения номера счёта (только чтение)
  String get accountNumber => _accountNumber;

  // Геттер для получения баланса (только чтение)
  double get balance => _balance;

  // Метод для пополнения счёта
  void deposit(double amount) {
    if (amount <= 0) {
      print('Сумма для пополнения должна быть больше 0.');
    } else {
      _balance += amount;
      print('Счёт пополнен на $amount. Текущий баланс: $_balance.');
    }
  }

  // Метод для снятия средств
  void withdraw(double amount) {
    if (amount <= 0) {
      print('Сумма для снятия должна быть больше 0.');
    } else if (amount > _balance) {
      print('Недостаточно средств! Доступный баланс: $_balance.');
    } else {
      _balance -= amount;
      print('Снято $amount. Текущий баланс: $_balance.');
    }
  }
}

void main() {
  // Создание банковского счёта
  BankAccount account = BankAccount('123456789', 1000.0);

  // Пополнение счёта
  account.deposit(500); // Пополнено на 500
  account.deposit(-100); // Ошибка

  // Снятие средств
  account.withdraw(200); // Снято 200
  account.withdraw(1500); // Ошибка, недостаточно средств
  account.withdraw(0); // Ошибка

  // Просмотр текущего состояния счета
  print('Номер счёта: ${account.accountNumber}');
  print('Баланс: ${account.balance}');
}

Задача 7

class Counter {
  // Статическое поле для хранения числа созданных объектов
  static int _count = 0;

  // Конструктор
  Counter() {
    _incrementCount();
  }

  // Метод для увеличения счётчика объектов
  static void _incrementCount() {
    _count++;
  }

  // Геттер для получения текущего значения счётчика
  static int get count => _count;
}

void main() {
  // Создаём несколько объектов класса Counter
  Counter obj1 = Counter();
  Counter obj2 = Counter();
  Counter obj3 = Counter();

  // Выводим общее количество созданных объектов
  print('Количество созданных объектов: ${Counter.count}');
}


Задача 8
// Абстрактный класс Shape
abstract class Shape {
  // Абстрактный метод для расчета площади
  double getArea();
}

// Класс Circle, наследующий от Shape
class Circle extends Shape {
  final double radius;

  // Конструктор для передачи радиуса
  Circle(this.radius);

  // Реализация метода getArea() для круга
  @override
  double getArea() {
    return 3.14159 * radius * radius; // Формула площади круга: πr²
  }
}

// Класс Rectangle, наследующий от Shape
class Rectangle extends Shape {
  final double width;
  final double height;

  // Конструктор для передачи ширины и высоты
  Rectangle(this.width, this.height);

  // Реализация метода getArea() для прямоугольника
  @override
  double getArea() {
    return width * height; // Формула площади прямоугольника: ширина * высота
  }
}

void main() {
  // Пример круга с радиусом 5
  Shape circle = Circle(5.0);
  print('Площадь круга: ${circle.getArea()}');

  // Пример прямоугольника с шириной 4 и высотой 6
  Shape rectangle = Rectangle(4.0, 6.0);
  print('Площадь прямоугольника: ${rectangle.getArea()}');
}


Задача 9
// Базовый класс Animal
class Animal {
  // Метод move(), который будет переопределен в потомках
  void move() {
    print("Животное движется...");
  }
}

// Класс Fish, наследующий Animal
class Fish extends Animal {
  // Переопределение метода move()
  @override
  void move() {
    print("Рыба плавает...");
  }
}

// Класс Bird, наследующий Animal
class Bird extends Animal {
  // Переопределение метода move()
  @override
  void move() {
    print("Птица летает...");
  }
}

// Класс Dog, наследующий Animal
class Dog extends Animal {
  // Переопределение метода move()
  @override
  void move() {
    print("Собака бегает...");
  }
}

void main() {
  // Создаем объекты классов
  Animal genericAnimal = Animal();
  Fish fish = Fish();
  Bird bird = Bird();
  Dog dog = Dog();

  // Вызываем методы move() для каждого объекта
  genericAnimal.move(); // Вывод: "Животное движется..."
  fish.move();          // Вывод: "Рыба плавает..."
  bird.move();          // Вывод: "Птица летает..."
  dog.move();           // Вывод: "Собака бегает..."
}


Задача 10








